{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"collis",
				"collidableObjects"
			],
			[
				"add",
				"addFrameScript(...)	Void"
			],
			[
				"con",
				"content	openfl.display.DisplayObject"
			],
			[
				"mo",
				"MovieClip"
			],
			[
				"conte",
				"contentLoaderInfo	openfl.display.LoaderInfo"
			],
			[
				"load",
				"loadBytes(...)	Void"
			],
			[
				"res",
				"Resource	class"
			],
			[
				"sc",
				"scrollFactor	flixel.util.FlxPoint"
			],
			[
				"butt",
				"buttonBack	var"
			],
			[
				"pla",
				"play(...)	flixel.system.FlxSound"
			],
			[
				"ima",
				"imageFootprint	var"
			],
			[
				"foot",
				"footprintsNum"
			],
			[
				"sca",
				"scaleX	Float"
			],
			[
				"imageLoade",
				"imageLoaderFill	var"
			],
			[
				"image",
				"imageLoaderFill	var"
			],
			[
				"Gr",
				"GraphicLogo	class"
			],
			[
				"Prelo",
				"FlxBasePreloader"
			],
			[
				"in",
				"int( x : Float )	Int"
			],
			[
				"he",
				"height	Float"
			],
			[
				"ve",
				"vec"
			],
			[
				"playe",
				"playerB"
			],
			[
				"play",
				"playerA"
			],
			[
				"str",
				"string"
			],
			[
				"player",
				"playerB"
			],
			[
				"remove",
				"removeFromParent"
			],
			[
				"player1",
				"player1Slot1"
			],
			[
				"remo",
				"removeItem"
			],
			[
				"gui",
				"guiPtr"
			],
			[
				"setS",
				"setScaleY"
			],
			[
				"sprt",
				"spriteBox"
			],
			[
				"rand",
				"randomItemTimer"
			],
			[
				"gener",
				"generateRandomItem"
			],
			[
				"m_",
				"m_item"
			],
			[
				"sprite",
				"spriteGlow"
			],
			[
				"spri",
				"spriteBox"
			],
			[
				"new",
				"newRot"
			],
			[
				"getVelocityL",
				"getVelocityLimit"
			],
			[
				"state",
				"stateDuration"
			],
			[
				"Characte",
				"CharacterNPC"
			],
			[
				"Eve",
				"EventKeyboard"
			],
			[
				"EVEN",
				"EventListenerKeyboard"
			],
			[
				"ke",
				"Keyboard	flash.ui"
			],
			[
				"FlxSp",
				"FlxSpriteUtil	flixel.util"
			],
			[
				"grea",
				"greatPlainsDialogShown"
			],
			[
				"goss",
				"gossipId	var"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/MenuState.hx",
			"settings":
			{
				"buffer_size": 769,
				"line_ending": "Windows"
			}
		},
		{
			"file": "source/PlayState.hx",
			"settings":
			{
				"buffer_size": 1550,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "package;\n\nimport openfl.Assets;\nimport flash.geom.Point;\nimport haxe.io.Path;\nimport haxe.xml.Parser;\nimport flixel.FlxG;\nimport flixel.FlxObject;\nimport flixel.FlxSprite;\nimport flixel.group.FlxGroup;\nimport flixel.tile.FlxTilemap;\nimport flixel.addons.editors.tiled.TiledMap;\nimport flixel.addons.editors.tiled.TiledObject;\nimport flixel.addons.editors.tiled.TiledObjectGroup;\nimport flixel.addons.editors.tiled.TiledTileSet;\n\nclass TiledLevel extends TiledMap{\n\n	private inline static var TILESETS_PATH = \"assets/images/\";\n	\n	public var 	foregroundTiles 		: FlxGroup;\n	public var 	backgroundTiles 		: FlxGroup;\n\n	public var 	pointStart 				: Point;\n\n	private var collidableObjects 		: Array<FlxObject>;\n	private var collidableTileLayers 	: Array<FlxTilemap>;\n	\n	public function new(tiledLevel:Dynamic){\n\n		super(tiledLevel);\n		\n		foregroundTiles = new FlxGroup();\n		backgroundTiles = new FlxGroup();\n\n		collidableObjects 	= new Array();\n		\n		FlxG.camera.setBounds(0, 0, fullWidth, fullHeight, true);\n		\n		for (tileLayer in layers){\n			var tileSheetName:String = tileLayer.properties.get(\"tileset\");\n			\n			if (tileSheetName == null){\n				throw \"'tileset' property not defined for the '\" + tileLayer.name + \"' layer. Please add the property to the layer.\";\n			}\n\n			var tileSet:TiledTileSet = null;\n			for (ts in tilesets){\n				if (ts.name == tileSheetName){\n					tileSet = ts;\n					break;\n				}\n			}\n			if (tileSet == null){\n				throw \"Tileset '\" + tileSheetName + \" not found. Did you mispell the 'tilesheet' property in \" + tileLayer.name + \"' layer?\";\n			}\n				\n			var imagePath 		= new Path(tileSet.imageSource);\n			var processedPath 	= TILESETS_PATH + imagePath.file + \".\" + imagePath.ext;\n			\n			var tilemap:FlxTilemap = new FlxTilemap();\n			tilemap.widthInTiles = width; \n			tilemap.heightInTiles = height;\n			tilemap.loadMap(tileLayer.tileArray, processedPath, tileSet.tileWidth, tileSet.tileHeight, 0, 1, 1, 1);\n\n			if (tileLayer.properties.contains(\"nocollide\")){\n				backgroundTiles.add(tilemap);\n			}\n			else{\n				if (collidableTileLayers == null){\n					collidableTileLayers = new Array<FlxTilemap>();\n				}\n				\n				foregroundTiles.add(tilemap);\n				collidableTileLayers.push(tilemap);\n			}\n		}\n	}\n	\n	public function loadObjects(state:PlayState){\n		for (group in objectGroups){\n			for (o in group.objects){\n				loadObject(o, group, state);\n			}\n		}\n	}\n	\n	private function loadObject(o:TiledObject, g:TiledObjectGroup, state:PlayState){\n		var x:Int = o.x;\n		var y:Int = o.y;\n		\n		// objects in tiled are aligned bottom-left (top-left in flixel)\n		if (o.gid != -1){\n			y -= g.map.getGidOwner(o.gid).tileHeight;\n		}\n\n		if(g.name.toLowerCase() == \"kolizje\")\n		{\n			var newObject = new FlxObject(x, y, o.width, o.height);\n			newObject.\n			collidableObjects.push(newObject);\n			trace(\"kolizje: \" + x + \"x\" + y + \" | \" + o.width + \"x\" + o.height);\n\n			return;\n		}\n\n		// if(g.name.toLowerCase() == \"deathly\"){\n		// 	state.hazards.add(new FlxObject(x, y, o.width, o.height));\n		// }\n		// trace(o.type.toLowerCase());\n		\n		switch (o.type.toLowerCase()){\n\n			case \"start\":\n				// trace(\"przebog\");\n\n				pointStart = new Point(x, y);\n\n			// case \"deathly\":\n				\n			// case \"floor\":\n			// 	var floor = new FlxObject(x, y, o.width, o.height);\n			// 	state.floor = floor;\n				\n			// case \"coin\":\n			// 	var tileset = g.map.getGidOwner(o.gid);\n			// 	var coin = new FlxSprite(x, y, TILESETS_PATH + tileset.imageSource);\n			// 	state.coins.add(coin);\n				\n			// case \"exit\":\n			// 	// Create the level exit\n			// 	var exit = new FlxSprite(x, y);\n			// 	exit.makeGraphic(32, 32, 0xff3f3f3f);\n			// 	exit.exists = false;\n			// 	state.exit = exit;\n			// 	state.add(exit);\n		}\n	}\n	\n	public function collideWithLevel(obj:FlxObject, ?notifyCallback:FlxObject->FlxObject->Void, ?processCallback:FlxObject->FlxObject->Bool):Bool{\n		var collision : Bool = false;\n\n		if (collidableTileLayers != null){\n			for (map in collidableTileLayers){\n				// IMPORTANT: Always collide the map with objects, not the other way around. \n				//			  This prevents odd collision errors (collision separation code off by 1 px).\n				if(FlxG.overlap(map, obj, notifyCallback, processCallback != null ? processCallback : FlxObject.separate)){\n					return true;\n				}\n			}\n		}\n\n		// if(!collision){\n			for(i in 0...collidableObjects.length){\n				if(FlxG.overlap(collidableObjects[i], obj, notifyCallback, processCallback != null ? processCallback : FlxObject.separate)){\n					return true;\n				}\n			}\n		// } \n\n		return collision;\n	}\n}",
			"file": "source/TiledLevel.hx",
			"file_size": 4676,
			"file_write_time": 130862907926967600,
			"settings":
			{
				"buffer_size": 4499,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 1811 files for \"allowCollisions\"\n\n/usr/share/haxe/lib/flixel/3,3,8/flixel/FlxObject.hx:\n   28  	public static var SEPARATE_BIAS:Float = 4;\n   29  	/**\n   30: 	 * Generic value for \"left\" Used by facing, allowCollisions, and touching.\n   31  	 */\n   32  	public static inline var LEFT:Int	= 0x0001;\n   33  	/**\n   34: 	 * Generic value for \"right\" Used by facing, allowCollisions, and touching.\n   35  	 */\n   36  	public static inline var RIGHT:Int	= 0x0010;\n   37  	/**\n   38: 	 * Generic value for \"up\" Used by facing, allowCollisions, and touching.\n   39  	 */\n   40  	public static inline var UP:Int		= 0x0100;\n   41  	/**\n   42: 	 * Generic value for \"down\" Used by facing, allowCollisions, and touching.\n   43  	 */\n   44  	public static inline var DOWN:Int	= 0x1000;\n   45  	/**\n   46: 	 * Special-case constant meaning no collisions, used mainly by allowCollisions and touching.\n   47  	 */\n   48  	public static inline var NONE:Int	= 0;\n   49  	/**\n   50: 	 * Special-case constant meaning up, used mainly by allowCollisions and touching.\n   51  	 */\n   52  	public static inline var CEILING:Int= UP;\n   53  	/**\n   54: 	 * Special-case constant meaning down, used mainly by allowCollisions and touching.\n   55  	 */\n   56  	public static inline var FLOOR:Int	= DOWN;\n   57  	/**\n   58: 	 * Special-case constant meaning only the left and right sides, used mainly by allowCollisions and touching.\n   59  	 */\n   60  	public static inline var WALL:Int	= LEFT | RIGHT;\n   61  	/**\n   62: 	 * Special-case constant meaning any direction, used mainly by allowCollisions and touching.\n   63  	 */\n   64  	public static inline var ANY:Int	= LEFT | RIGHT | UP | DOWN;\n   ..\n  130  				{\n  131  					overlap = Object1.x + Object1.width - Object2.x;\n  132: 					if ((overlap > maxOverlap) || ((Object1.allowCollisions & RIGHT) == 0) || ((Object2.allowCollisions & LEFT) == 0))\n  133  					{\n  134  						overlap = 0;\n  ...\n  143  				{\n  144  					overlap = Object1.x - Object2.width - Object2.x;\n  145: 					if ((-overlap > maxOverlap) || ((Object1.allowCollisions & LEFT) == 0) || ((Object2.allowCollisions & RIGHT) == 0))\n  146  					{\n  147  						overlap = 0;\n  ...\n  243  				{\n  244  					overlap = Object1.y + Object1.height - Object2.y;\n  245: 					if ((overlap > maxOverlap) || ((Object1.allowCollisions & DOWN) == 0) || ((Object2.allowCollisions & UP) == 0))\n  246  					{\n  247  						overlap = 0;\n  ...\n  256  				{\n  257  					overlap = Object1.y - Object2.height - Object2.y;\n  258: 					if ((-overlap > maxOverlap) || ((Object1.allowCollisions & UP) == 0) || ((Object2.allowCollisions & DOWN) == 0))\n  259  					{\n  260  						overlap = 0;\n  ...\n  366  	/**\n  367  	 * Whether the object collides or not.  For more control over what directions the object will collide from, \n  368: 	 * use collision constants (like LEFT, FLOOR, etc) to set the value of allowCollisions directly.\n  369  	 */\n  370  	public var solid(get, set):Bool;\n  ...\n  439  	/**\n  440  	 * Bit field of flags (use with UP, DOWN, LEFT, RIGHT, etc) indicating collision directions. Use bitwise operators to check the values stored here.\n  441: 	 * Useful for things like one-way platforms (e.g. allowCollisions = UP;). The accessor \"solid\" just flips this variable between NONE and ANY.\n  442  	 */\n  443: 	public var allowCollisions:Int = ANY;\n  444  	/**\n  445  	 * Whether this sprite is dragged along with the horizontal movement of objects it collides with \n  ...\n  896  		if (color == null)\n  897  		{\n  898: 			if (allowCollisions != FlxObject.NONE)\n  899  			{\n  900: 				if (allowCollisions != ANY)\n  901  				{\n  902  					color = FlxColor.PINK;\n  ...\n 1011  	private inline function get_solid():Bool\n 1012  	{\n 1013: 		return (allowCollisions & ANY) > NONE;\n 1014  	}\n 1015  	\n ....\n 1018  		if (Solid)\n 1019  		{\n 1020: 			allowCollisions = ANY;\n 1021  		}\n 1022  		else\n 1023  		{\n 1024: 			allowCollisions = NONE;\n 1025  		}\n 1026  		return Solid;\n\n/usr/share/haxe/lib/flixel/3,3,8/flixel/effects/particles/FlxTypedEmitter.hx:\n  283  			else\n  284  			{\n  285: 				particle.allowCollisions = FlxObject.NONE;\n  286  			}\n  287  			\n\n/usr/share/haxe/lib/flixel/3,3,8/flixel/system/FlxQuadTree.hx:\n  394  					{\n  395  						_object = cast(basic, FlxObject);\n  396: 						if (_object.exists && _object.allowCollisions != FlxObject.NONE)\n  397  						{\n  398  							_objectLeftEdge = _object.x;\n  ...\n  409  		{\n  410  			_object = cast(ObjectOrGroup, FlxObject);\n  411: 			if (_object.exists && _object.allowCollisions != FlxObject.NONE)\n  412  			{\n  413  				_objectLeftEdge = _object.x;\n  ...\n  584  					_iterator = iterator.next;\n  585  				}\n  586: 				if (_object != null && _object.exists && _object.allowCollisions > 0 && \n  587  					_iterator != null && _iterator.object != null && overlapNode())\n  588  				{\n  ...\n  635  		{\n  636  			checkObject = _iterator.object;\n  637: 			if (_object == checkObject || !checkObject.exists || checkObject.allowCollisions <= 0)\n  638  			{\n  639  				_iterator = _iterator.next;\n\n/usr/share/haxe/lib/flixel/3,3,8/flixel/text/FlxText.hx:\n  201  		_textField.height = (Text.length <= 0) ? 1 : 10;\n  202  		\n  203: 		allowCollisions = FlxObject.NONE;\n  204  		moves = false;\n  205  		\n\n/usr/share/haxe/lib/flixel/3,3,8/flixel/tile/FlxTile.hx:\n   48  	 * @param 	Height			The height of the tile.\n   49  	 * @param 	Visible			Whether the tile is visible or not.\n   50: 	 * @param 	AllowCollisions	The collision flags for the object.  By default this value is ANY or NONE depending on the parameters sent to loadMap().\n   51  	 */\n   52: 	public function new(Tilemap:FlxTilemap, Index:Int, Width:Float, Height:Float, Visible:Bool, AllowCollisions:Int)\n   53  	{\n   54  		super(0, 0, Width, Height);\n   ..\n   61  		index = Index;\n   62  		visible = Visible;\n   63: 		allowCollisions = AllowCollisions;\n   64  	}\n   65  	\n\n/usr/share/haxe/lib/flixel/3,3,8/flixel/tile/FlxTilemap.hx:\n  300  	 * @param	StartingIndex	Used to sort of insert empty tiles in front of the provided graphic.  Default is 0, usually safest ot leave it at that.  Ignored if AutoTile is set.\n  301  	 * @param	DrawIndex		Initializes all tile objects equal to and after this index as visible. Default value is 1.  Ignored if AutoTile is set.\n  302: 	 * @param	CollideIndex	Initializes all tile objects equal to and after this index as allowCollisions = ANY.  Default value is 1.  Ignored if AutoTile is set.  Can override and customize per-tile-type collision behavior using setTileProperties().\n  303  	 * @return	A reference to this instance of FlxTilemap, for chaining as usual :)\n  304  	 */\n  ...\n  489  		for (i in 0...length)\n  490  		{\n  491: 			_tileObjects[i] = new FlxTile(this, i, _tileWidth, _tileHeight, (i >= DrawIndex), (i >= CollideIndex) ? allowCollisions : FlxObject.NONE);\n  492  		}\n  493  		\n  ...\n  633  					if (tile != null)\n  634  					{\n  635: 						if (tile.allowCollisions <= FlxObject.NONE)\n  636  						{\n  637  							debugColor = FlxColor.BLUE;\n  638  						}\n  639: 						else if (tile.allowCollisions != FlxObject.ANY)\n  640  						{\n  641  							debugColor = FlxColor.PINK;\n  ...\n  747  		while (i < l)\n  748  		{\n  749: 			data[i] = (_tileObjects[_data[i]].allowCollisions > 0) ? 1 : 0;\n  750  			i++;\n  751  		}\n  ...\n  786  \n  787  		// Check that the start and end are clear.\n  788: 		if ((_tileObjects[_data[startIndex]].allowCollisions > 0) || (_tileObjects[_data[endIndex]].allowCollisions > 0))\n  789  		{\n  790  			return null;\n  ...\n  990  				               ((Object.y + Object.height) > tile.y) && (Object.y < (tile.y + tile.height));\n  991  				\n  992: 				if (tile.allowCollisions != FlxObject.NONE)\n  993  				{\n  994  					if (Callback != null)\n  ...\n 1013  					}\n 1014  					\n 1015: 					if (tile.allowCollisions != FlxObject.NONE)\n 1016  					{\n 1017  						results = true;\n ....\n 1041  		if (!InScreenSpace)\n 1042  		{\n 1043: 			return _tileObjects[_data[Math.floor(Math.floor((WorldPoint.y - y) / _scaledTileHeight) * widthInTiles + (WorldPoint.x - x) / _scaledTileWidth)]].allowCollisions > 0;\n 1044  		}\n 1045  		\n ....\n 1053  		getScreenXY(_point, Camera);\n 1054  		\n 1055: 		var result:Bool =  _tileObjects[_data[Std.int(Std.int((WorldPoint.y - WorldPoint.y) / _scaledTileHeight) * widthInTiles + (WorldPoint.x - WorldPoint.x) / _scaledTileWidth)]].allowCollisions > 0;\n 1056  		WorldPoint.putWeak();\n 1057  		return result;\n ....\n 1089  	public function getTileCollisions(Index:Int):Int\n 1090  	{\n 1091: 		return _tileObjects[Index].allowCollisions;\n 1092  	}\n 1093  	\n ....\n 1244  	 * \n 1245  	 * @param	Tile				The tile or tiles you want to adjust.\n 1246: 	 * @param	AllowCollisions		Modify the tile or tiles to only allow collisions from certain directions, use FlxObject constants NONE, ANY, LEFT, RIGHT, etc.  Default is \"ANY\".\n 1247  	 * @param	Callback			The function to trigger, e.g. lavaCallback(Tile:FlxTile, Object:FlxObject).\n 1248  	 * @param	CallbackFilter		If you only want the callback to go off for certain classes or objects based on a certain class, set that class here.\n 1249  	 * @param	Range				If you want this callback to work for a bunch of different tiles, input the range here.  Default value is 1.\n 1250  	 */\n 1251: 	public function setTileProperties(Tile:Int, AllowCollisions:Int = FlxObject.ANY, ?Callback:FlxObject->FlxObject->Void, ?CallbackFilter:Class<Dynamic>, Range:Int = 1):Void\n 1252  	{\n 1253  		if (Range <= 0)\n ....\n 1263  		{\n 1264  			tile = _tileObjects[i++];\n 1265: 			tile.allowCollisions = AllowCollisions;\n 1266  			tile.callbackFunction = Callback;\n 1267  			tile.filter = CallbackFilter;\n ....\n 1351  			tileY = Math.floor(curY / _scaledTileHeight);\n 1352  			\n 1353: 			if (_tileObjects[_data[tileY * widthInTiles + tileX]].allowCollisions != FlxObject.NONE)\n 1354  			{\n 1355  				// Some basic helper stuff\n ....\n 1616  						if (tile != null)\n 1617  						{\n 1618: 							if (tile.allowCollisions <= FlxObject.NONE)\n 1619  							{\n 1620  								// Blue\n 1621  								debugTile = _debugTileNotSolid; \n 1622  							}\n 1623: 							else if (tile.allowCollisions != FlxObject.ANY)\n 1624  							{\n 1625  								// Pink\n ....\n 1800  		while (i < mapSize)\n 1801  		{\n 1802: 			if (_tileObjects[_data[i]].allowCollisions != FlxObject.NONE)\n 1803  			{\n 1804  				distances[i] = -2;\n\n/usr/share/haxe/lib/flixel-addons/1,1,0/flixel/addons/tile/FlxTilemapExt.hx:\n  243  						if (tile != null)\n  244  						{\n  245: 							if (tile.allowCollisions <= FlxObject.NONE)\n  246  							{\n  247  								// Blue\n  248  								debugTile = _debugTileNotSolid; \n  249  							}\n  250: 							else if (tile.allowCollisions != FlxObject.ANY)\n  251  							{\n  252  								// Pink\n  ...\n  524  				tile = _tileObjects[_data[rowStart + column]];\n  525  				\n  526: 				if (tile.allowCollisions != 0)\n  527  				{\n  528  					tile.x = X + column * _tileWidth;\n\n/home/zrfu/dev/dss/dss/source/TiledLevel.hx:\n   98  		{\n   99  			var newObject = new FlxObject(x, y, o.width, o.height);\n  100: 			newObject.allowCollisions\n  101  			collidableObjects.push(newObject);\n  102  			trace(\"kolizje: \" + x + \"x\" + y + \" | \" + o.width + \"x\" + o.height);\n\n59 matches across 8 files\n",
			"settings":
			{
				"buffer_size": 11191,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/usr/share/haxe/lib/flixel/3,3,8/flixel/FlxObject.hx",
			"settings":
			{
				"buffer_size": 34648,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 180.0,
		"last_filter": "sscm",
		"selected_items":
		[
			[
				"sscm",
				"Set Syntax: CMake"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/zrfu/dev/dss/default",
		"/home/zrfu/dev/dss/dss/source"
	],
	"file_history":
	[
		"/usr/share/haxe/lib/swf/2,0,1/format/swf/instance/Bitmap.hx",
		"/usr/lib/haxe/std/flash/display/Loader.hx",
		"/home/zrfu/dev/dss/dss/FlxProject.sublime-project",
		"/home/zrfu/dev/CursedIslands/CursedIslands/source/Button.hx",
		"/home/zrfu/dev/CursedIslands/CursedIslands/source/PlayState.hx",
		"/home/zrfu/.wine/dosdevices/c:/GOG Games/Harvester/Launch Harvester.lnk",
		"/home/zrfu/dev/CursedIslands/CursedIslands/source/Sounds.hx",
		"/home/zrfu/dev/CursedIslands/CursedIslands/source/MenuState.hx",
		"/home/zrfu/dev/CursedIslands/CursedIslands/FlxProject.sublime-project",
		"/home/zrfu/dev/OctoPony03/Classes/AppDelegate.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/Popup.cpp",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/base/CCEventDispatcher.h",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/base/CCDirector.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/Item.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/CharacterNPC.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/PlayerCharacter.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/Item.h",
		"/home/zrfu/dev/OctoPony03/Classes/Gui.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/MapConfig.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/Obstacle.h",
		"/home/zrfu/dev/OctoPony03/Classes/MapConfig.h",
		"/home/zrfu/dev/OctoPony03/Classes/CharacterConfig.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/PlayerCharacter.h",
		"/home/zrfu/dev/OctoPony03/Classes/CharacterNPC.h",
		"/home/zrfu/dev/OctoPony03/Classes/FrameAnimation.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/Gui.h",
		"/home/zrfu/dev/OctoPony03/Classes/FrameAnimation.h",
		"/home/zrfu/dev/OctoPony03/Classes/HelloWorldScene.h",
		"/home/zrfu/dev/OctoPony03/cocos2d/CMakeLists.txt",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/base/CCEventKeyboard.h",
		"/home/zrfu/dev/OctoPony03/Classes/Character.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/Character.h",
		"/home/zrfu/dev/OctoPony03/Classes/Obstacle.cpp",
		"/home/zrfu/dev/OctoPony03/cocos2d/linux-build/Makefile",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/2d/CCNode.h",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/base/CCEvent.cpp",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/base/CCEvent.h",
		"/home/zrfu/.config/sublime-text-3/Packages/User/QuickXDev.sublime-settings",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/platform/desktop/CCGLViewImpl-desktop.h",
		"/home/zrfu/dev/OctoPony03/Classes/CharacterPlayer.cpp",
		"/home/zrfu/dev/OctoPony03/Classes/CharacterPlayer.h",
		"/home/zrfu/dev/OctoPony03/cocos2d/cocos/2d/CCSprite.cpp",
		"/home/zrfu/.config/sublime-text-3/Packages/QuickXDev/QuickXDev.sublime-settings",
		"/home/zrfu/dev/OctoPony03/Classes/AppDelegate.h",
		"/home/zrfu/dev/CursedIslands/CursedIslands/Project.xml",
		"/home/zrfu/dev/CursedIslands/CursedIslands/source/Hero.hx",
		"/home/zrfu/dev/CursedIslands/CursedIslands/source/Dialog.hx",
		"/home/zrfu/stuff/imgur-screenshot.sh",
		"/usr/share/haxe/lib/lime/2,4,1/lime/ui/KeyCode.hx",
		"/usr/share/haxe/lib/flixel/3,3,8/flixel/system/FlxCollisionType.hx",
		"/home/zrfu/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/zrfu/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/zrfu/Pulpit/storecontroller imponderabilia",
		"/home/zrfu/dev/Cursed Islands/source/Button.hx",
		"/home/zrfu/dev/Cursed Islands/source/Main.hx",
		"/usr/share/haxe/lib/flixel/3,3,6/flixel/system/FlxCollisionType.hx"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"veloci",
			"allowCollisions",
			"{",
			"library",
			"_player",
			"{",
			"_player",
			"c_PATH_LEVEL_TILESHEETS",
			"40",
			"przeb",
			"Dialog",
			"dialog",
			"onButtonBack",
			"buttonBack",
			"dialog",
			"dialogExit",
			"dialog",
			"Dialog",
			"dialog",
			"Dialog",
			"dialog",
			"));\n",
			"Dialog",
			"dialog",
			"Dialog",
			"dialog",
			"Dialog",
			"dialog",
			"dialo",
			"fully",
			"toggleSound",
			"amulet",
			"mapBounds",
			"random",
			"hero",
			"points",
			"getCurrentPoint",
			"imagesPlaces",
			"mine",
			"switchs",
			"buttonMute",
			"buttonmute",
			"buttonMute",
			".str",
			"str",
			"amulet",
			"1.1",
			"trac",
			"rotation",
			"flxsprite",
			".x",
			"GraphicPreloaderFill",
			"add",
			"imageLoaderFill",
			"imagePreloaderFill",
			"imageLoaderFill",
			"distance",
			"/",
			" / ",
			"preloade",
			"rolldice",
			"rollDice",
			"boss",
			"exac",
			"imagesWaves",
			"plantTheCorn",
			"cornstalk",
			"playso",
			"active",
			"buttonNewGame",
			"continue",
			"removeFromParent",
			"removei",
			"removeitem",
			"removeItem",
			"updateItems",
			"setHuddish",
			"upda",
			"popup",
			"HelloWorld",
			"removeItem",
			"Item",
			"addEventListenerWithFixedPriority",
			"onItemCreatedEvent",
			"\"addedItem\"",
			"},",
			"remem",
			"},",
			",",
			"obs",
			"5",
			"box",
			"onGameOver",
			"explo",
			"CharacterNPC",
			"anim",
			"enter",
			"generateRandomItem",
			"play",
			"dot",
			"explo",
			")\n",
			"explode",
			"init",
			"png",
			"include_directori",
			"include_di",
			"activeite",
			"activei3",
			"removeChild",
			"activei",
			"pick",
			"removei",
			"activeItems",
			"dropi",
			"retain",
			"pickItem",
			"dropItem",
			"removeFromParentAndCleanup",
			"onen",
			"sche",
			"removeItem",
			"genera",
			"setposi",
			"generateRandomItem",
			"setPosition",
			"//",
			"Node"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/MenuState.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 769,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "source/PlayState.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1550,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 900.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "source/TiledLevel.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4499,
						"regions":
						{
						},
						"selection":
						[
							[
								2698,
								2698
							]
						],
						"settings":
						{
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1215.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11191,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										213,
										228
									],
									[
										373,
										388
									],
									[
										531,
										546
									],
									[
										689,
										704
									],
									[
										867,
										882
									],
									[
										1028,
										1043
									],
									[
										1194,
										1209
									],
									[
										1386,
										1401
									],
									[
										1569,
										1584
									],
									[
										1812,
										1827
									],
									[
										1856,
										1871
									],
									[
										2060,
										2075
									],
									[
										2103,
										2118
									],
									[
										2308,
										2323
									],
									[
										2351,
										2366
									],
									[
										2554,
										2569
									],
									[
										2595,
										2610
									],
									[
										2880,
										2895
									],
									[
										3191,
										3206
									],
									[
										3314,
										3329
									],
									[
										3518,
										3533
									],
									[
										3580,
										3595
									],
									[
										3734,
										3749
									],
									[
										3831,
										3846
									],
									[
										3900,
										3915
									],
									[
										4084,
										4099
									],
									[
										4309,
										4324
									],
									[
										4511,
										4526
									],
									[
										4716,
										4731
									],
									[
										4963,
										4978
									],
									[
										5171,
										5186
									],
									[
										5433,
										5448
									],
									[
										5682,
										5697
									],
									[
										5817,
										5832
									],
									[
										5835,
										5850
									],
									[
										6355,
										6370
									],
									[
										6778,
										6793
									],
									[
										6906,
										6921
									],
									[
										7040,
										7055
									],
									[
										7215,
										7230
									],
									[
										7383,
										7398
									],
									[
										7438,
										7453
									],
									[
										7636,
										7651
									],
									[
										7772,
										7787
									],
									[
										8052,
										8067
									],
									[
										8331,
										8346
									],
									[
										8516,
										8531
									],
									[
										8652,
										8667
									],
									[
										9273,
										9288
									],
									[
										9503,
										9518
									],
									[
										9521,
										9536
									],
									[
										9759,
										9774
									],
									[
										9919,
										9934
									],
									[
										10085,
										10100
									],
									[
										10241,
										10256
									],
									[
										10465,
										10480
									],
									[
										10631,
										10646
									],
									[
										10800,
										10815
									],
									[
										11024,
										11039
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								219,
								219
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/usr/share/haxe/lib/flixel/3,3,8/flixel/FlxObject.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34648,
						"regions":
						{
						},
						"selection":
						[
							[
								3071,
								3071
							]
						],
						"settings":
						{
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1054.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "FlxProject.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"playsta",
				"source/PlayState.hx"
			],
			[
				"tiled",
				"source/TiledLevel.hx"
			],
			[
				"main",
				"source/Main.hx"
			],
			[
				"playst",
				"source/PlayState.hx"
			],
			[
				"tiledleve",
				"source/TiledLevel.hx"
			],
			[
				"playstat",
				"source/PlayState.hx"
			],
			[
				"playstate",
				"source/PlayState.hx"
			],
			[
				"hero",
				"source/Hero.hx"
			],
			[
				"intros",
				"source/IntroState.hx"
			],
			[
				"button",
				"source/Button.hx"
			],
			[
				"plays",
				"source/PlayState.hx"
			],
			[
				"play",
				"source/PlayState.hx"
			],
			[
				"sound",
				"source/Sounds.hx"
			],
			[
				"menus",
				"source/MenuState.hx"
			],
			[
				"her",
				"source/Hero.hx"
			],
			[
				"sounds",
				"source/Sounds.hx"
			],
			[
				"playercha",
				"Classes/PlayerCharacter.cpp"
			],
			[
				"item",
				"Classes/Item.cpp"
			],
			[
				"gui",
				"Classes/Gui.cpp"
			],
			[
				"pop",
				"Classes/Popup.cpp"
			],
			[
				"characternp",
				"Classes/CharacterNPC.h"
			],
			[
				"hellowo",
				"Classes/HelloWorldScene.cpp"
			],
			[
				"appde",
				"Classes/AppDelegate.cpp"
			],
			[
				"chracternpc",
				"Classes/CharacterNPC.cpp"
			],
			[
				"obstac",
				"Classes/Obstacle.h"
			],
			[
				"obsta",
				"Classes/Obstacle.cpp"
			],
			[
				"hello",
				"Classes/HelloWorldScene.h"
			],
			[
				"playerch",
				"Classes/PlayerCharacter.cpp"
			],
			[
				"playerc",
				"Classes/PlayerCharacter.h"
			],
			[
				"frama",
				"Classes/FrameAnimation.cpp"
			],
			[
				"framean",
				"Classes/FrameAnimation.h"
			],
			[
				"playecha",
				"Classes/PlayerCharacter.h"
			],
			[
				"charac",
				"Classes/Character.h"
			],
			[
				"charactern",
				"Classes/CharacterNPC.h"
			],
			[
				"character",
				"Classes/Character.h"
			],
			[
				"playerchara",
				"Classes/PlayerCharacter.cpp"
			],
			[
				"cceven",
				"cocos2d/cocos/base/CCEvent.h"
			],
			[
				"chara",
				"Classes/Character.h"
			],
			[
				"makefi",
				"cocos2d/linux-build/Makefile"
			],
			[
				"make",
				"cocos2d/linux-build/Makefile"
			],
			[
				"dialo",
				"source/Dialog.hx"
			],
			[
				"in",
				"source/IntroState.hx"
			],
			[
				"pla",
				"source/PlayState.hx"
			],
			[
				"house",
				"source/House.hx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
